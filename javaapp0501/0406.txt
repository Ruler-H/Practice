박문석
010-3790-1997, ggangpae1@gmail.com

수업 자료: ggangpae1.tistory.com

Java -> Database(Oracle, MySQL, MongoDB) -> Java에서 데이터베이스 연동 -> 
Web Front End(HTML, CSS, JavaScript) -> Java Web Programming -> Java Framework(Spring, MyBatis, Hibernate) -> Android(Java -> Kotlin) -> iOS(Swift)

1.프로그래밍을 하기 위한 준비
1)프로그래밍언어로 작성한 코드를 번역해주기 위한 번역기가 필요 - Java는 JDK
2)코드 작성을 편리하게 해주고 번역과 실행까지 자동으로 수행해주는 IDE 가 필요 
  - Eclipse : 무료, 공공기관과 대기업이 많이 사용
  - Intelli J : 일반 Application 과 Android App 제작에 이용하는 것은 무료
                Web Application 만드는 것은 유료

2.JDK(Java Developer Kit)
=>자바로 프로그래밍을 할 때 필요한 것들을 모아놓은 프로그램
1)Java API(Application Programming Interface): 응용 프로그램을 만들기 위한 클래스의 집합으로 Java 회사에서 제공 - API 대신에 SDK(Software Development Kit)이라고도 합니다.

2)JVM(Java Virtual Machine): 자바로 만들어진 프로그램을 실행시키기 위한 가상의 프로그램

3)자바 관련 명령어

3.JRE(Java Runtime Environment)
=>JDK 없이 자바 프로그램을 실행시킬 수 있는 도구

4.개발환경 구성
1)JDK 설치 - 자바 개발 도구 : 필수
=>www.oracle.com 에서 다운로드

2)Eclipse 설치 - IDE : 선택
=>www.eclipse.org에서 다운로드
=>Eclipse 대신에 Intelli J 나 NetBeans 사용 가능
=>Eclipse를 설치할 때 주의할 점은 Enterprise Java Developer 버전을 설치해야만 웹 프로그래밍을 할 수 있습니다.

5.프로그래밍의 작업 단위
1)workspace: 프로젝트들이 저장되는 디렉토리
=>실무에서는 하나의 프로젝트에 하나의 workspace를 사용

2)project: 하나의 Application(Program)

3)module: 실행되는 단위
=>일반 Java Application에서는 main 메소드를 갖는 class

4)class: 유사한 역할을 하는 코드의 모임

6.Eclipse에서 Project를 만들고 모듈을 만들어서 실행하기
1)Java Application을 생성
=>[File] - [New] - [Other] 에서 Java Project를 선택 : PC에서 수행이 가능한 프로그램
=>project 이름을 입력
실무에서는 회사도메인을 역순으로 쓰고 기술이름을 기재
com.samsung.first

2)실행 가능한 모듈(클래스)을 추가
=>src 디렉토리를 선택하고 마우스 오른쪽을 클릭하고 [New] - [Class]를 선택
Class Name을 입력하고 하단에 main 메소드를 추가하는 옵션을 선택

3)Code 작성 - main 메소드 안에 작성
System.out.println("Hello Java");

4)코드 실행
Source Code 작성 -> Compile(코드가 문법에 맞게 작성되었는지 확인하고 컴퓨터가 이해할 수 있는 코드로 변경 - 에러가 나면 문법 오류이므로 코드를 수정) -> Build(Compile 된 파일들을 실행가능한 프로그램으로 생성 - 에러가 발생하면 구조를 고쳐야 합니다.) -> Run(실행 - 발생하는 오류는 예외이므로 예외처리를 하거나 어쩔 수 없는 경우)

=>eclipse에서는 실행할 클래스를 선택하고 [Run] - [Run] 또는 녹색 바탕에 삼각형 아이콘을 누르면 실행됩니다.

7.Eclipse 화면 구성
=>perspective: 프로젝트 종류 별로 자주 사용하는 뷰들을 모아놓은 것
=>view: 작은 화면 하나
1)perspective 변경
[Window] - [Perspective] - [Open Perspective] - [Other]에서 원하는 종류를 선택

2)view 변경
[Window] - [Show View] 에서 선택
=>package explorer: 애플리케이션 구조 
=>project explorer: 디렉토리 구조
=>console: CLI(Command Line Interface) 환경에서의 결과를 보는 창
=>problems: 에러나 경고 내용을 모아서 보여주는 창

8.자바 파일의 기본 구조
1)package ?
=>생략하거나 1번만 나와야 하고 맨 위에 나와야 합니다.
=>package: 자바 클래스들의 모임 - 용도별로 모아서 배포하기 쉽게 하기 위해서 생성
일반적으로 배포하는 단위가 package

2)import ?
=>생략하거나 여러 번 나올 수 있습니다.
=>package 다음에 나와야 합니다.
package가 없으면 가장 먼저 나와야 합니다.
=>import는 줄여쓰기를 하기 위해서 사용합니다.
자바나 안드로이드 및 iOS에서는 클래스 이름을 만들 때 최소 3단 Naming을  권장합니다.
gmail.ggangpae1.first.Main 이런식으로 클래스 이름을 만듭니다.
사용할 때마다 전체이름을 사용하는 것은 코드의 낭비
import gmail.ggangpae1.first.* 이 코드를 위에 적으면 다음부터는 Main이라고만 입력하면 됩니다.

3)class ? { 내용 } : 필수
=>클래스를 만들고 내용을 작성
=>여러 개 가능하지만 하나의 파일에 하나만 만드는 것을 권장
=>java는 소스 파일의 이름이 클래스이름.java 이어야 합니다.
그렇지 않으면 에러

4)class 안에 있는 public static void main(String [] args){내용}
=>이 클래스가 실행이 가능한 클래스가 되도록 해주는 메소드
=>이 구문이 있어야만 실행을 할 수 있습니다.
agrs는 이름을 변경해도 됩니다. 

5)System.out.println("Hello Java");
=>System.out(표준 출력 장치 - 모니터).println(내용을 Console에 출력하고 줄바꿈)

9.코드 작성 시 유의 사항
1)자바는 대소문자를 구분합니다.
2)한 번에 실행되는 문장의 끝은 ;
3)행의 들여쓰기나 줄바꿈은 의미가 없음
;을 만날 때 까지를 하나의 문장으로 간주
4)하나의 블럭을 { }로 만듭니다.
블럭은 하나로 해석해야하는 코드들의 모임입니다.
제어문, 예외처리구문, 메소드, 클래스(인터페이스)가 블럭입니다.
블럭 안에서 생성한 것은 블럭 안에서만 사용이 가능합니다.

10.System.out.print, System.out.println
=>콘솔에 출력하는 메소드
=>( )안에 출력할 내용을 작성해주면 됩니다.
1)출력할 내용 작성
=>문자열 메시지 출력: "내용"
=>여러 개의 메시지 출력: "내용" + "내용"
=>"내용" 대신에 숫자를 출력하고자 하면 숫자를 입력: 3
=>데이터도 출력 가능

2)print 와 println 차이
=>print는 모아서 한 번에 출력하는 것이고 println은 각각 출력하고 줄바꿈을 합니다.

11.연습문제
=>자신의 이름을 출력하는 프로그램을 만들고 실행
1)Java Project 생성

2)Project 내의 src 디렉토리에 main 메소드를 소유한 클래스를 생성

3)main(String [] args){ } 안에 수행할 내용을 작성

4)실행할 클래스를 선택하고 [Run] - [Run](Ctrl + F11)

12.Name
1)Keyword(예약어): 프로그래밍 언어나 IDE에서 기능을 정한 단어
=>예약어의 기능은 변경할 수 없습니다.
=>이클립스 기본 설정에서는 보라색 비슷하게 보입니다.
=>문법을 공부하는 것은 이 예약어의 기능을 공부하는 것입니다.
=>대부분의 프로그래밍언어가 비슷하게 가지고 있습니다.

2)Idenfier(식별자): 프로그래머가 다른 것과 구분하기 위해서 붙이는 이름
=>예약어는 식별자로 사용할 수 없습니다.
=>영문, 한글, 숫자, 특수문자(_, $, ?)를 사용할 수 있음
=>첫글자로 숫자는 안됩니다.
=>중간에 공백을 포함할 수 없습니다.

=>영문으로 시작하는 것을 권장
=>이름을 만들 때는 기능을 예측할 수 있도록 만드는 것을 권장
한글자는 비추천

=>Camel 표기법
변수 나 메소드의 이름은 소문자로 시작
클래스나 인터페이스, enum 의 이름은 대문자로 시작
상수(final)는 모두 대문자로 표기
2개 단어 이상으로 이름을 만들 때는 두번째 단어의 시작도 대문자로 만들기를 권장

데이터의 개수를 저장하는 변수를 생성
- int count

count를 가져오는 메소드를 생성
- getCount
count에 데이터를 대입하는 메소드를 생성
- setCount

13.Comment(주석)
=>컴파일러가 해석하지 않는 문장
=>소스 코드의 이해를 돕기 위해서 작성
1)한 줄 주석
//주석 내용

2)여러 줄 주석
/*
	주석 내용
*/

=>주석은 중요합니다.
다른 유저가 원하는 프로그램을 만들어 주었을 때 그 유저가 이해할 수 있도록 주석을 달아주면 유저가 소스 코드를 수정할 수 있습니다.









